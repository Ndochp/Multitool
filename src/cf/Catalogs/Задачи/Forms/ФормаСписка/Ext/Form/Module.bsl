&НаКлиенте
Перем ПредТекущаяЗадача; // кэш со ссылкой на текущую задачу

&НаКлиенте
Процедура Группа1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.грСтруктура Тогда
		// Считаем, что перешли из туду
		ЗадачаИзТуду = Элементы.ТудуСписок.ТекущаяСтрока;
		Если ЗадачаИзТуду <> Неопределено Тогда
			Элементы.Список.ТекущаяСтрока = ЗадачаИзТуду;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменаТекущейЗадачи() Экспорт 
	ТекущаяЗадача = ПредТекущаяЗадача;
	ПодключитьОбработчикОжидания("СменаТекущейЗадачиВтораяВолна", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СменаТекущейЗадачиВтораяВолна() Экспорт 
	ТекущаяЗадачаИнтерактивноеОписание = СтрШаблон("<html><body>%1</body></html>", Элементы.ТекущаяЗадачаОписаниеЗадачи.ТекстРедактирования);
	// Вытащим историю решения
	Элементы.ДатаРешения.Заголовок = ДатаРешения(ТекущаяЗадача);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаРешения(Знач ТекущаяЗадача)
	Перем Рез;
	Перем Запрос;
	Если Не ТекущаяЗадача.Решена Тогда
		Возврат "";
	КонецЕсли;
	
	ИсторияДанных.ОбновитьИсторию(ТекущаяЗадача);
	Отбор = Новый Структура;
	Отбор.Вставить("Данные", ТекущаяЗадача);
	ЗадачаРешена = Новый Структура;
	ЗадачаРешена.Вставить("Поле", "Решена");
	ЗадачаРешена.Вставить("ЗначениеПослеИзменения", Истина);
	ИзмененияПолей = Новый Массив;
	ИзмененияПолей.Добавить(ЗадачаРешена);
	Отбор.Вставить("ЗначенияПолей", ИзмененияПолей);
	Версии = ИсторияДанных.ВыбратьВерсии(Отбор, "Дата", , 1);
	Если Версии.Количество() > 0 Тогда
		Рез = Версии[0].Дата;
	Иначе
		Рез = "";
	КонецЕсли;

	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	ПредТекущаяЗадача = Элемент.ТекущаяСтрока;
	ПодключитьОбработчикОжидания("СменаТекущейЗадачи", 0.1, Истина);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ИнтерактивноеОписаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Ссылка = "";
	Если ДанныеСобытия.Свойство("href", Ссылка) Тогда
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СтандартнаяОбработка = Ложь;
			ПерейтиПоНавигационнойСсылке(Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	МинутНаРефреш = 5;
	ПодключитьОбработчикОжидания("УстановитьНовоеВремяВЗапросе", МинутНаРефреш * 60);
	УсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовоеВремяВЗапросе()
    ТудуСписок.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ОбщегоНазначения.ДатаСеанса());
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// ins, Создать ребенка
	Отказ = Истина; // Отключаем типовое открытие формы, вызовем сами
	СоздатьРебенка();
КонецПроцедуры

&НаКлиенте
Процедура ТудуСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// ins, Создать ребенка
	Отказ = Истина; // Отключаем типовое открытие формы, вызовем сами
	СоздатьРебенка();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРебенка()
	Перем Отказ, ПараметрКоманды, ПараметрыВыполненияКоманды;
	// текущеми данными/строкой может быть или ГруппировкаСтроки или Ссылка (точнее предусмотренные колонки) 
	
	// ins, Создать ребенка
	ПараметрКоманды = Неопределено; //+++ Проверить на какой строке стоим и собрать соответствующий параметр как в команде
	ПараметрыВыполненияКоманды = Новый Структура();
	ПараметрыВыполненияКоманды.Вставить("Источник", ЭтотОбъект);
	ПараметрыВыполненияКоманды.Вставить("Уникальность", Неопределено);
	ПараметрыВыполненияКоманды.Вставить("Окно", Неопределено);
	ПараметрыВыполненияКоманды.Вставить("НавигационнаяСсылка", Неопределено);
	
	// ПараметрыВыполненияКоманды.Источник,
	// ПараметрыВыполненияКоманды.Уникальность,
	// ПараметрыВыполненияКоманды.Окно,
	// ПараметрыВыполненияКоманды.НавигационнаяСсылка
	
	ЗадачиКлиент.СоздатьРебенка(ПараметрКоманды, ПараметрыВыполненияКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ТудуСписокОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// Здесь надо попробовать обработать что мы перенесли элемент справочника на группировочное поле, тогда назначаем реквизит по нему.
КонецПроцедуры

&НаКлиенте
Процедура ТудуСписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// ТУДУ: Сделать общий алгоритм, чтобы можно было менять любой реквизит ссылки и даже сразу несколько, если группировок много
	Если Строка.ИмяГруппировки = "Ссылка.КатегорияСрочности" И ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		Для Каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(Значение) = Тип("СправочникСсылка.Задачи") Тогда
				ОбновлениеБыло = ОбновитьЗадачу(Значение, Строка);
				Если ОбновлениеБыло Тогда 
					ОповеститьОбИзменении(Значение);
					Оповестить("Обновление", , Значение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьЗадачу(Знач Значение, Знач Строка)
	
	Перем Объект, ОбновлениеБыло;
	
	Если Значение.КатегорияСрочности <> Строка.Ключ Тогда
		Объект = Значение.ПолучитьОбъект();
		Объект.КатегорияСрочности = Строка.Ключ;
		Объект.ЗАписать();
		ОбновлениеБыло = Истина;
	Иначе
		ОбновлениеБыло = Ложь;
	КонецЕсли;
	Возврат ОбновлениеБыло;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура УсловноеОформление()
	//+++
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементОформления = ТудуСписок.УсловноеОформление.Элементы.Добавить();

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЛососьСветлый);
	
	ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаЭлементовОтбора.Использование = Истина;

	ТипЭлементОтбораКомпоновкиДанных = Тип("ЭлементОтбораКомпоновкиДанных");

	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(ТипЭлементОтбораКомпоновкиДанных);

	ПолеСоСроком = Новый ПолеКомпоновкиДанных("Срок");

	ЭлементОтбора.ЛевоеЗначение = ПолеСоСроком;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбора.Использование = Истина;

	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(ТипЭлементОтбораКомпоновкиДанных);
	ЭлементОтбора.ЛевоеЗначение = ПолеСоСроком;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Дата(1, 1, 1);
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(ТипЭлементОтбораКомпоновкиДанных);
	ЭлементОтбора.ЛевоеЗначение = ПолеСоСроком;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(Знач ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
